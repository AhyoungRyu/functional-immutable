import Immutable from 'immutable';
import _isFunction from 'lodash.isfunction';
import _get from 'lodash.get';

const hasFunction = (...vargs) => _isFunction(_get(...vargs));

// Re-exported static Methods
export const fromJS = (...vargs) => Immutable.fromJS(...vargs);

// Methods as null-safe functions
export const add = (...vargs) => data => (hasFunction(data, 'add') ? data.add(...vargs) : undefined);
export const asImmutable = (...vargs) => data => (hasFunction(data, 'asImmutable') ? data.asImmutable(...vargs) : undefined);
export const asMutable = (...vargs) => data => (hasFunction(data, 'asMutable') ? data.asMutable(...vargs) : undefined);
export const butLast = (...vargs) => data => (hasFunction(data, 'butLast') ? data.butLast(...vargs) : undefined);
export const cacheResult = (...vargs) => data => (hasFunction(data, 'cacheResult') ? data.cacheResult(...vargs) : undefined);
export const clear = (...vargs) => data => (hasFunction(data, 'clear') ? data.clear(...vargs) : undefined);
export const concat = (...vargs) => data => (hasFunction(data, 'concat') ? data.concat(...vargs) : undefined);
export const count = (...vargs) => data => (hasFunction(data, 'count') ? data.count(...vargs) : undefined);
export const countBy = (...vargs) => data => (hasFunction(data, 'countBy') ? data.countBy(...vargs) : undefined);
export const deleteAt = (...vargs) => data => (hasFunction(data, 'delete') ? data.delete(...vargs) : undefined);
export const deleteIn = (...vargs) => data => (hasFunction(data, 'deleteIn') ? data.deleteIn(...vargs) : undefined);
export const entries = (...vargs) => data => (hasFunction(data, 'entries') ? data.entries(...vargs) : undefined);
export const entrySeq = (...vargs) => data => (hasFunction(data, 'entrySeq') ? data.entrySeq(...vargs) : undefined);
export const equals = (...vargs) => data => (hasFunction(data, 'equals') ? data.equals(...vargs) : undefined);
export const every = (...vargs) => data => (hasFunction(data, 'every') ? data.every(...vargs) : undefined);
export const filter = (...vargs) => data => (hasFunction(data, 'filter') ? data.filter(...vargs) : undefined);
export const filterNot = (...vargs) => data => (hasFunction(data, 'filterNot') ? data.filterNot(...vargs) : undefined);
export const find = (...vargs) => data => (hasFunction(data, 'find') ? data.find(...vargs) : undefined);
export const findEntry = (...vargs) => data => (hasFunction(data, 'findEntry') ? data.findEntry(...vargs) : undefined);
export const findIndex = (...vargs) => data => (hasFunction(data, 'findIndex') ? data.findIndex(...vargs) : undefined);
export const findKey = (...vargs) => data => (hasFunction(data, 'findKey') ? data.findKey(...vargs) : undefined);
export const findLast = (...vargs) => data => (hasFunction(data, 'findLast') ? data.findLast(...vargs) : undefined);
export const findLastEntry = (...vargs) => data => (hasFunction(data, 'findLastEntry') ? data.findLastEntry(...vargs) : undefined);
export const findLastIndex = (...vargs) => data => (hasFunction(data, 'findLastIndex') ? data.findLastIndex(...vargs) : undefined);
export const findLastKey = (...vargs) => data => (hasFunction(data, 'findLastKey') ? data.findLastKey(...vargs) : undefined);
export const first = (...vargs) => data => (hasFunction(data, 'first') ? data.first(...vargs) : undefined);
export const flatMap = (...vargs) => data => (hasFunction(data, 'flatMap') ? data.flatMap(...vargs) : undefined);
export const flatten = (...vargs) => data => (hasFunction(data, 'flatten') ? data.flatten(...vargs) : undefined);
export const flip = (...vargs) => data => (hasFunction(data, 'flip') ? data.flip(...vargs) : undefined);
export const forEach = (...vargs) => data => (hasFunction(data, 'forEach') ? data.forEach(...vargs) : undefined);
export const fromEntrySeq = (...vargs) => data => (hasFunction(data, 'fromEntrySeq') ? data.fromEntrySeq(...vargs) : undefined);
export const get = (...vargs) => data => (hasFunction(data, 'get') ? data.get(...vargs) : undefined);
export const getIn = (...vargs) => data => (hasFunction(data, 'getIn') ? data.getIn(...vargs) : undefined);
export const groupBy = (...vargs) => data => (hasFunction(data, 'groupBy') ? data.groupBy(...vargs) : undefined);
export const has = (...vargs) => data => (hasFunction(data, 'has') ? data.has(...vargs) : undefined);
export const hashCode = (...vargs) => data => (hasFunction(data, 'hashCode') ? data.hashCode(...vargs) : undefined);
export const hasIn = (...vargs) => data => (hasFunction(data, 'hasIn') ? data.hasIn(...vargs) : undefined);
export const includes = (...vargs) => data => (hasFunction(data, 'includes') ? data.includes(...vargs) : undefined);
export const indexOf = (...vargs) => data => (hasFunction(data, 'indexOf') ? data.indexOf(...vargs) : undefined);
export const insert = (...vargs) => data => (hasFunction(data, 'insert') ? data.insert(...vargs) : undefined);
export const interleave = (...vargs) => data => (hasFunction(data, 'interleave') ? data.interleave(...vargs) : undefined);
export const interpose = (...vargs) => data => (hasFunction(data, 'interpose') ? data.interpose(...vargs) : undefined);
export const intersect = (...vargs) => data => (hasFunction(data, 'intersect') ? data.intersect(...vargs) : undefined);
export const is = (...vargs) => data => (hasFunction(data, 'is') ? data.is(...vargs) : undefined);
export const isEmpty = (...vargs) => data => (hasFunction(data, 'isEmpty') ? data.isEmpty(...vargs) : undefined);
export const isSubset = (...vargs) => data => (hasFunction(data, 'isSubset') ? data.isSubset(...vargs) : undefined);
export const isSuperset = (...vargs) => data => (hasFunction(data, 'isSuperset') ? data.isSuperset(...vargs) : undefined);
export const join = (...vargs) => data => (hasFunction(data, 'join') ? data.join(...vargs) : undefined);
export const keyOf = (...vargs) => data => (hasFunction(data, 'keyOf') ? data.keyOf(...vargs) : undefined);
export const keys = (...vargs) => data => (hasFunction(data, 'keys') ? data.keys(...vargs) : undefined);
export const keySeq = (...vargs) => data => (hasFunction(data, 'keySeq') ? data.keySeq(...vargs) : undefined);
export const last = (...vargs) => data => (hasFunction(data, 'last') ? data.last(...vargs) : undefined);
export const lastIndexOf = (...vargs) => data => (hasFunction(data, 'lastIndexOf') ? data.lastIndexOf(...vargs) : undefined);
export const lastKeyOf = (...vargs) => data => (hasFunction(data, 'lastKeyOf') ? data.lastKeyOf(...vargs) : undefined);
export const map = (...vargs) => data => (hasFunction(data, 'map') ? data.map(...vargs) : undefined);
export const mapEntries = (...vargs) => data => (hasFunction(data, 'mapEntries') ? data.mapEntries(...vargs) : undefined);
export const mapKeys = (...vargs) => data => (hasFunction(data, 'mapKeys') ? data.mapKeys(...vargs) : undefined);
export const max = (...vargs) => data => (hasFunction(data, 'max') ? data.max(...vargs) : undefined);
export const maxBy = (...vargs) => data => (hasFunction(data, 'maxBy') ? data.maxBy(...vargs) : undefined);
export const merge = (...vargs) => data => (hasFunction(data, 'merge') ? data.merge(...vargs) : undefined);
export const mergeDeep = (...vargs) => data => (hasFunction(data, 'mergeDeep') ? data.mergeDeep(...vargs) : undefined);
export const mergeDeepIn = (...vargs) => data => (hasFunction(data, 'mergeDeepIn') ? data.mergeDeepIn(...vargs) : undefined);
export const mergeDeepWith = (...vargs) => data => (hasFunction(data, 'mergeDeepWith') ? data.mergeDeepWith(...vargs) : undefined);
export const mergeIn = (...vargs) => data => (hasFunction(data, 'mergeIn') ? data.mergeIn(...vargs) : undefined);
export const mergeWith = (...vargs) => data => (hasFunction(data, 'mergeWith') ? data.mergeWith(...vargs) : undefined);
export const min = (...vargs) => data => (hasFunction(data, 'min') ? data.min(...vargs) : undefined);
export const minBy = (...vargs) => data => (hasFunction(data, 'minBy') ? data.minBy(...vargs) : undefined);
export const peek = (...vargs) => data => (hasFunction(data, 'peek') ? data.peek(...vargs) : undefined);
export const pop = (...vargs) => data => (hasFunction(data, 'pop') ? data.pop(...vargs) : undefined);
export const push = (...vargs) => data => (hasFunction(data, 'push') ? data.push(...vargs) : undefined);
export const pushAll = (...vargs) => data => (hasFunction(data, 'pushAll') ? data.pushAll(...vargs) : undefined);
export const reduce = (...vargs) => data => (hasFunction(data, 'reduce') ? data.reduce(...vargs) : undefined);
export const reduceRight = (...vargs) => data => (hasFunction(data, 'reduceRight') ? data.reduceRight(...vargs) : undefined);
export const rest = (...vargs) => data => (hasFunction(data, 'rest') ? data.rest(...vargs) : undefined);
export const reverse = (...vargs) => data => (hasFunction(data, 'reverse') ? data.reverse(...vargs) : undefined);
export const set = (...vargs) => data => (hasFunction(data, 'set') ? data.set(...vargs) : undefined);
export const setIn = (...vargs) => data => (hasFunction(data, 'setIn') ? data.setIn(...vargs) : undefined);
export const setSize = (...vargs) => data => (hasFunction(data, 'setSize') ? data.setSize(...vargs) : undefined);
export const shift = (...vargs) => data => (hasFunction(data, 'shift') ? data.shift(...vargs) : undefined);
export const skip = (...vargs) => data => (hasFunction(data, 'skip') ? data.skip(...vargs) : undefined);
export const skipLast = (...vargs) => data => (hasFunction(data, 'skipLast') ? data.skipLast(...vargs) : undefined);
export const skipUntil = (...vargs) => data => (hasFunction(data, 'skipUntil') ? data.skipUntil(...vargs) : undefined);
export const skipWhile = (...vargs) => data => (hasFunction(data, 'skipWhile') ? data.skipWhile(...vargs) : undefined);
export const slice = (...vargs) => data => (hasFunction(data, 'slice') ? data.slice(...vargs) : undefined);
export const some = (...vargs) => data => (hasFunction(data, 'some') ? data.some(...vargs) : undefined);
export const sort = (...vargs) => data => (hasFunction(data, 'sort') ? data.sort(...vargs) : undefined);
export const sortBy = (...vargs) => data => (hasFunction(data, 'sortBy') ? data.sortBy(...vargs) : undefined);
export const splice = (...vargs) => data => (hasFunction(data, 'splice') ? data.splice(...vargs) : undefined);
export const subtract = (...vargs) => data => (hasFunction(data, 'subtract') ? data.subtract(...vargs) : undefined);
export const take = (...vargs) => data => (hasFunction(data, 'take') ? data.take(...vargs) : undefined);
export const takeLast = (...vargs) => data => (hasFunction(data, 'takeLast') ? data.takeLast(...vargs) : undefined);
export const takeUntil = (...vargs) => data => (hasFunction(data, 'takeUntil') ? data.takeUntil(...vargs) : undefined);
export const takeWhile = (...vargs) => data => (hasFunction(data, 'takeWhile') ? data.takeWhile(...vargs) : undefined);
export const toArray = (...vargs) => data => (hasFunction(data, 'toArray') ? data.toArray(...vargs) : undefined);
export const toIndexedSeq = (...vargs) => data => (hasFunction(data, 'toIndexedSeq') ? data.toIndexedSeq(...vargs) : undefined);
export const toJS = (...vargs) => data => (hasFunction(data, 'toJS') ? data.toJS(...vargs) : undefined);
export const toKeyedSeq = (...vargs) => data => (hasFunction(data, 'toKeyedSeq') ? data.toKeyedSeq(...vargs) : undefined);
export const toList = (...vargs) => data => (hasFunction(data, 'toList') ? data.toList(...vargs) : undefined);
export const toMap = (...vargs) => data => (hasFunction(data, 'toMap') ? data.toMap(...vargs) : undefined);
export const toObject = (...vargs) => data => (hasFunction(data, 'toObject') ? data.toObject(...vargs) : undefined);
export const toOrderedMap = (...vargs) => data => (hasFunction(data, 'toOrderedMap') ? data.toOrderedMap(...vargs) : undefined);
export const toOrderedSet = (...vargs) => data => (hasFunction(data, 'toOrderedSet') ? data.toOrderedSet(...vargs) : undefined);
export const toSeq = (...vargs) => data => (hasFunction(data, 'toSeq') ? data.toSeq(...vargs) : undefined);
export const toSet = (...vargs) => data => (hasFunction(data, 'toSet') ? data.toSet(...vargs) : undefined);
export const toSetSeq = (...vargs) => data => (hasFunction(data, 'toSetSeq') ? data.toSetSeq(...vargs) : undefined);
export const toStack = (...vargs) => data => (hasFunction(data, 'toStack') ? data.toStack(...vargs) : undefined);
export const union = (...vargs) => data => (hasFunction(data, 'union') ? data.union(...vargs) : undefined);
export const unshift = (...vargs) => data => (hasFunction(data, 'unshift') ? data.unshift(...vargs) : undefined);
export const unshiftAll = (...vargs) => data => (hasFunction(data, 'unshiftAll') ? data.unshiftAll(...vargs) : undefined);
export const update = (...vargs) => data => (hasFunction(data, 'update') ? data.update(...vargs) : undefined);
export const updateIn = (...vargs) => data => (hasFunction(data, 'updateIn') ? data.updateIn(...vargs) : undefined);
export const values = (...vargs) => data => (hasFunction(data, 'values') ? data.values(...vargs) : undefined);
export const valueSeq = (...vargs) => data => (hasFunction(data, 'valueSeq') ? data.valueSeq(...vargs) : undefined);
export const withMutations = (...vargs) => data => (hasFunction(data, 'withMutations') ? data.withMutations(...vargs) : undefined);
export const zip = (...vargs) => data => (hasFunction(data, 'zip') ? data.zip(...vargs) : undefined);
export const zipWith = (...vargs) => data => (hasFunction(data, 'zipWith') ? data.zipWith(...vargs) : undefined);
