import { List } from 'immutable';

// Static functions re-exported
export const isList = (...vargs) => List.isList(...vargs);
export const of = (...vargs) => List.of(...vargs);

// Propeties as null-safe function
export const size = () => data => isList(data) ? data.size : undefined;

// Functions changed
export const del = (...vargs) => data => isList(data) ? data.delete(...vargs) : undefined;

// Functions wrapped
export const asImmutable = (...vargs) => data => isList(data) ? data.asImmutable(...vargs) : undefined;
export const asMutable = (...vargs) => data => isList(data) ? data.asMutable(...vargs) : undefined;
export const butLast = (...vargs) => data => isList(data) ? data.butLast(...vargs) : undefined;
export const clear = (...vargs) => data => isList(data) ? data.clear(...vargs) : undefined;
export const concat = (...vargs) => data => isList(data) ? data.concat(...vargs) : undefined;
export const count = (...vargs) => data => isList(data) ? data.count(...vargs) : undefined;
export const countBy = (...vargs) => data => isList(data) ? data.countBy(...vargs) : undefined;
export const deleteIn = (...vargs) => data => isList(data) ? data.deleteIn(...vargs) : undefined;
export const entries = (...vargs) => data => isList(data) ? data.entries(...vargs) : undefined;
export const entrySeq = (...vargs) => data => isList(data) ? data.entrySeq(...vargs) : undefined;
export const equals = (...vargs) => data => isList(data) ? data.equals(...vargs) : undefined;
export const every = (...vargs) => data => isList(data) ? data.every(...vargs) : undefined;
export const filter = (...vargs) => data => isList(data) ? data.filter(...vargs) : undefined;
export const filterNot = (...vargs) => data => isList(data) ? data.filterNot(...vargs) : undefined;
export const find = (...vargs) => data => isList(data) ? data.find(...vargs) : undefined;
export const findEntry = (...vargs) => data => isList(data) ? data.findEntry(...vargs) : undefined;
export const findIndex = (...vargs) => data => isList(data) ? data.findIndex(...vargs) : undefined;
export const findKey = (...vargs) => data => isList(data) ? data.findKey(...vargs) : undefined;
export const findLast = (...vargs) => data => isList(data) ? data.findLast(...vargs) : undefined;
export const findLastEntry = (...vargs) => data => isList(data) ? data.findLastEntry(...vargs) : undefined;
export const findLastIndex = (...vargs) => data => isList(data) ? data.findLastIndex(...vargs) : undefined;
export const findLastKey = (...vargs) => data => isList(data) ? data.findLastKey(...vargs) : undefined;
export const first = (...vargs) => data => isList(data) ? data.first(...vargs) : undefined;
export const flatMap = (...vargs) => data => isList(data) ? data.flatMap(...vargs) : undefined;
export const flatten = (...vargs) => data => isList(data) ? data.flatten(...vargs) : undefined;
export const forEach = (...vargs) => data => isList(data) ? data.forEach(...vargs) : undefined;
export const fromEntrySeq = (...vargs) => data => isList(data) ? data.fromEntrySeq(...vargs) : undefined;
export const get = (...vargs) => data => isList(data) ? data.get(...vargs) : undefined;
export const getIn = (...vargs) => data => isList(data) ? data.getIn(...vargs) : undefined;
export const groupBy = (...vargs) => data => isList(data) ? data.groupBy(...vargs) : undefined;
export const has = (...vargs) => data => isList(data) ? data.has(...vargs) : undefined;
export const hashCode = (...vargs) => data => isList(data) ? data.hashCode(...vargs) : undefined;
export const hasIn = (...vargs) => data => isList(data) ? data.hasIn(...vargs) : undefined;
export const includes = (...vargs) => data => isList(data) ? data.includes(...vargs) : undefined;
export const indexOf = (...vargs) => data => isList(data) ? data.indexOf(...vargs) : undefined;
export const insert = (...vargs) => data => isList(data) ? data.insert(...vargs) : undefined;
export const interleave = (...vargs) => data => isList(data) ? data.interleave(...vargs) : undefined;
export const interpose = (...vargs) => data => isList(data) ? data.interpose(...vargs) : undefined;
export const isEmpty = (...vargs) => data => isList(data) ? data.isEmpty(...vargs) : undefined;
export const isSubset = (...vargs) => data => isList(data) ? data.isSubset(...vargs) : undefined;
export const isSuperset = (...vargs) => data => isList(data) ? data.isSuperset(...vargs) : undefined;
export const join = (...vargs) => data => isList(data) ? data.join(...vargs) : undefined;
export const keyOf = (...vargs) => data => isList(data) ? data.keyOf(...vargs) : undefined;
export const keys = (...vargs) => data => isList(data) ? data.keys(...vargs) : undefined;
export const keySeq = (...vargs) => data => isList(data) ? data.keySeq(...vargs) : undefined;
export const last = (...vargs) => data => isList(data) ? data.last(...vargs) : undefined;
export const lastIndexOf = (...vargs) => data => isList(data) ? data.lastIndexOf(...vargs) : undefined;
export const lastKeyOf = (...vargs) => data => isList(data) ? data.lastKeyOf(...vargs) : undefined;
export const map = (...vargs) => data => isList(data) ? data.map(...vargs) : undefined;
export const max = (...vargs) => data => isList(data) ? data.max(...vargs) : undefined;
export const maxBy = (...vargs) => data => isList(data) ? data.maxBy(...vargs) : undefined;
export const merge = (...vargs) => data => isList(data) ? data.merge(...vargs) : undefined;
export const mergeDeep = (...vargs) => data => isList(data) ? data.mergeDeep(...vargs) : undefined;
export const mergeDeepIn = (...vargs) => data => isList(data) ? data.mergeDeepIn(...vargs) : undefined;
export const mergeDeepWith = (...vargs) => data => isList(data) ? data.mergeDeepWith(...vargs) : undefined;
export const mergeIn = (...vargs) => data => isList(data) ? data.mergeIn(...vargs) : undefined;
export const mergeWith = (...vargs) => data => isList(data) ? data.mergeWith(...vargs) : undefined;
export const min = (...vargs) => data => isList(data) ? data.min(...vargs) : undefined;
export const minBy = (...vargs) => data => isList(data) ? data.minBy(...vargs) : undefined;
export const pop = (...vargs) => data => isList(data) ? data.pop(...vargs) : undefined;
export const push = (...vargs) => data => isList(data) ? data.push(...vargs) : undefined;
export const reduce = (...vargs) => data => isList(data) ? data.reduce(...vargs) : undefined;
export const reduceRight = (...vargs) => data => isList(data) ? data.reduceRight(...vargs) : undefined;
export const rest = (...vargs) => data => isList(data) ? data.rest(...vargs) : undefined;
export const reverse = (...vargs) => data => isList(data) ? data.reverse(...vargs) : undefined;
export const set = (...vargs) => data => isList(data) ? data.set(...vargs) : undefined;
export const setIn = (...vargs) => data => isList(data) ? data.setIn(...vargs) : undefined;
export const setSize = (...vargs) => data => isList(data) ? data.setSize(...vargs) : undefined;
export const shift = (...vargs) => data => isList(data) ? data.shift(...vargs) : undefined;
export const skip = (...vargs) => data => isList(data) ? data.skip(...vargs) : undefined;
export const skipLast = (...vargs) => data => isList(data) ? data.skipLast(...vargs) : undefined;
export const skipUntil = (...vargs) => data => isList(data) ? data.skipUntil(...vargs) : undefined;
export const skipWhile = (...vargs) => data => isList(data) ? data.skipWhile(...vargs) : undefined;
export const slice = (...vargs) => data => isList(data) ? data.slice(...vargs) : undefined;
export const some = (...vargs) => data => isList(data) ? data.some(...vargs) : undefined;
export const sort = (...vargs) => data => isList(data) ? data.sort(...vargs) : undefined;
export const sortBy = (...vargs) => data => isList(data) ? data.sortBy(...vargs) : undefined;
export const splice = (...vargs) => data => isList(data) ? data.splice(...vargs) : undefined;
export const take = (...vargs) => data => isList(data) ? data.take(...vargs) : undefined;
export const takeLast = (...vargs) => data => isList(data) ? data.takeLast(...vargs) : undefined;
export const takeUntil = (...vargs) => data => isList(data) ? data.takeUntil(...vargs) : undefined;
export const takeWhile = (...vargs) => data => isList(data) ? data.takeWhile(...vargs) : undefined;
export const toArray = (...vargs) => data => isList(data) ? data.toArray(...vargs) : undefined;
export const toIndexedSeq = (...vargs) => data => isList(data) ? data.toIndexedSeq(...vargs) : undefined;
export const toJS = (...vargs) => data => isList(data) ? data.toJS(...vargs) : undefined;
export const toKeyedSeq = (...vargs) => data => isList(data) ? data.toKeyedSeq(...vargs) : undefined;
export const toList = (...vargs) => data => isList(data) ? data.toList(...vargs) : undefined;
export const toMap = (...vargs) => data => isList(data) ? data.toMap(...vargs) : undefined;
export const toObject = (...vargs) => data => isList(data) ? data.toObject(...vargs) : undefined;
export const toOrderedMap = (...vargs) => data => isList(data) ? data.toOrderedMap(...vargs) : undefined;
export const toOrderedSet = (...vargs) => data => isList(data) ? data.toOrderedSet(...vargs) : undefined;
export const toSeq = (...vargs) => data => isList(data) ? data.toSeq(...vargs) : undefined;
export const toSet = (...vargs) => data => isList(data) ? data.toSet(...vargs) : undefined;
export const toSetSeq = (...vargs) => data => isList(data) ? data.toSetSeq(...vargs) : undefined;
export const toStack = (...vargs) => data => isList(data) ? data.toStack(...vargs) : undefined;
export const unshift = (...vargs) => data => isList(data) ? data.unshift(...vargs) : undefined;
export const update = (...vargs) => data => isList(data) ? data.update(...vargs) : undefined;
export const updateIn = (...vargs) => data => isList(data) ? data.updateIn(...vargs) : undefined;
export const values = (...vargs) => data => isList(data) ? data.values(...vargs) : undefined;
export const valueSeq = (...vargs) => data => isList(data) ? data.valueSeq(...vargs) : undefined;
export const withMutations = (...vargs) => data => isList(data) ? data.withMutations(...vargs) : undefined;
export const zip = (...vargs) => data => isList(data) ? data.zip(...vargs) : undefined;
export const zipWith = (...vargs) => data => isList(data) ? data.zipWith(...vargs) : undefined;
